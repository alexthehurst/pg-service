#!/usr/bin/env python3

import argparse
import os
import sys
import configparser
from urllib.parse import urlparse, unquote

parser = argparse.ArgumentParser(description="Add or update a PostgreSQL service in ~/.pg_service.conf")
parser.add_argument("service_name", help="Name of the PostgreSQL service to add or update")
parser.add_argument("connection_string", help="PostgreSQL connection string")
parser.add_argument("--dry-run", action="store_true", help="Print the updated config file without making any changes")


args = parser.parse_args()

parsed = urlparse(args.connection_string)

if parsed.scheme not in [ "postgresql", "postgres" ]:
    print("Error: Unsupported database type:", parsed.scheme)
    sys.exit(1)

pg_service_file = os.path.expanduser("~/.pg_service.conf")
config = configparser.ConfigParser()
config.read(pg_service_file)

if args.service_name not in config.sections():
    config.add_section(args.service_name)

config.set(args.service_name, "host", parsed.hostname)
if parsed.port:
    config.set(args.service_name, "port", str(parsed.port))
if parsed.username:
    config.set(args.service_name, "user", parsed.username)
if parsed.password:
    config.set(args.service_name, "password", unquote(parsed.password))
if parsed.path:
    config.set(args.service_name, "dbname", parsed.path.lstrip("/"))

space_around_delimiters = False
if args.dry_run:
    config.write(sys.stdout, space_around_delimiters=space_around_delimiters)
else:
    with open(pg_service_file, "w") as f:
        config.write(f, space_around_delimiters=space_around_delimiters)
    print(f"Added or updated service '{args.service_name}' in '{pg_service_file}'")
